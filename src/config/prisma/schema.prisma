// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id String @id @default(uuid())
  name String @db.VarChar(255)
  phoneNumber String
  answers CustomerAnswer[]
  surveys CustomerSurvey[]
  company Company @relation(fields: [companyId], references: [id])
  companyId String
}

model CustomerAnswer {
  id String @id @default(uuid())
  customer Customer @relation(fields: [customerId], references: [id])
  customerId String
  answer String
  question Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Survey {
  id String @id @default(uuid())
  company Company @relation(fields: [companyId], references: [id])
  companyId String
  name String @db.VarChar(255)
  title String @db.VarChar(255)
  questions Question[]
  customers CustomerSurvey[]
}

model Question {
  id String @id @default(uuid())
  survey Survey @relation(fields: [surveyId], references: [id])
  surveyId String
  question String
  order Int
  answers QuestionAnswer[]
  customerAnswers CustomerAnswer[]
}

model QuestionAnswer {
  id String @id @default(uuid())
  question Question @relation(fields: [questionId], references: [id])
  questionId String
  answer String
  label String
}

model CustomerSurvey {
  id String @id @default(uuid())
  active Boolean
  customer Customer @relation(fields: [customerId], references: [id])
  customerId String
  survey Survey @relation(fields: [surveyId], references: [id])
  surveyId String
}

model Company {
  id String @id @default(uuid())
  active Boolean
  name String
  email String @unique
  surveys Survey[]
  password String
  customers Customer[]
  phoneNumbers PhoneCompany[]
  senders Sender[]
}

model PhoneCompany {
  id String @id @default(uuid())
  active Boolean
  phoneNumber String
  metaId String
  company Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Sender {
  id String @id @default(uuid())
  name String
  email String @unique
  company Company @relation(fields: [companyId], references: [id])
  companyId String
}

model WaitingCompany {
  id String @id @default(uuid())
  name String
  email String @unique
  phoneNumber String @unique
  companyName String
}
